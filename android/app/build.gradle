plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}


android {
    namespace "com.rencanggunung.flutter_convert_heictojpg"
    compileSdkVersion 36
    ndkVersion flutter.ndkVersion

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.rencanggunung.flutter_convert_heictojpg"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.
        minSdkVersion 24
        targetSdkVersion 36
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }
    
    signingConfigs{
        release{
            def envFile = rootProject.file("../.env")
            def env = new Properties()
            env.load(new FileInputStream(envFile))
            storeFile rootProject.file(env['RELEASE_STORE_PATH'])
            storePassword env['RELEASE_STORE_PASSWORD']
            keyAlias env['RELEASE_KEY_ALIAS']
            keyPassword env['RELEASE_KEY_PASSWORD']
        }
    }


    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release

             android.applicationVariants.all { variant ->
                variant.outputs.all { output ->
                    def date = new Date()
                    if(output.getFilter(com.android.build.OutputFile.ABI) != null){
                        outputFileName = "Photos_Converter-v${versionName}_${date.format('ddMMyyyy')}_${output.getFilter(com.android.build.OutputFile.ABI)}_${variant.name}.apk"
                    }else{
                        outputFileName = "Photos_Converter-v${versionName}_${date.format('ddMMyyyy')}_${variant.name}.apk"
                    }
                }
                tasks.named("sign${variant.name.capitalize()}Bundle", com.android.build.gradle.internal.tasks.FinalizeBundleTask) {
                    File file = finalBundleFile.asFile.get()
            
            
                     def date = new Date()
                    File finalFile = new File(file.parentFile, "Photos_Converter${variant.name}-v${versionName}+${versionCode}-${date.format('ddMMyyyy')}.aab")
                    finalBundleFile.set(finalFile)
                }
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.4'
    implementation("com.google.android.material:material:1.13.0")
}
